{"ast":null,"code":"import { isObject } from '@chakra-ui/utils';\nfunction resolveReference(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nconst toExpression = function (operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\");\n};\nconst add = function () {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return `calc(${toExpression(\"+\", ...operands)})`;\n};\nconst subtract = function () {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return `calc(${toExpression(\"-\", ...operands)})`;\n};\nconst multiply = function () {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return `calc(${toExpression(\"*\", ...operands)})`;\n};\nconst divide = function () {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return `calc(${toExpression(\"/\", ...operands)})`;\n};\nconst negate = x => {\n  const value = resolveReference(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nconst calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n    return calc(add(x, ...operands));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n    return calc(subtract(x, ...operands));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n    return calc(multiply(x, ...operands));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n    return calc(divide(x, ...operands));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"names":["isObject","resolveReference","operand","reference","String","toExpression","operator","_len","arguments","length","operands","Array","_key","map","join","replace","add","_len2","_key2","subtract","_len3","_key3","multiply","_len4","_key4","divide","_len5","_key5","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","toString"],"sources":["/Users/macbookair/Documents/namangan-project/node_modules/@chakra-ui/styled-system/dist/esm/create-theme-vars/calc.mjs"],"sourcesContent":["import { isObject } from '@chakra-ui/utils';\n\nfunction resolveReference(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nconst toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\");\nconst add = (...operands) => `calc(${toExpression(\"+\", ...operands)})`;\nconst subtract = (...operands) => `calc(${toExpression(\"-\", ...operands)})`;\nconst multiply = (...operands) => `calc(${toExpression(\"*\", ...operands)})`;\nconst divide = (...operands) => `calc(${toExpression(\"/\", ...operands)})`;\nconst negate = (x) => {\n  const value = resolveReference(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nconst calc = Object.assign(\n  (x) => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString()\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate\n  }\n);\n\nexport { calc };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}